
UsingSessionAndUIScope.activeUIobjects     = Det finns aktuellt {0} UI objekt som \u00E4r aktivt/aktiva f\u00F6r denna session (Session ID <em>{1}</em>).
UsingSessionAndUIScope.currentUIsID        = ID f\u00F6r det aktuella UI objektet: 
UsingSessionAndUIScope.editVariables       = Redigera variabler med session eller UI scope:
UsingSessionAndUIScope.headline            = Arbeta med Vaadins session och UI scope
UsingSessionAndUIScope.openThisApplication = \u00D6ppna denna applikation i ett nytt f\u00F6nster eller tab i din webbl\u00E4sare <a href="#!{0}" target="_blank">med denna l\u00E4nk</a> och uppdatera din webbl\u00E4sarens inneh\u00E5ll efter du har redigerat variablerna med olika scope.
UsingSessionAndUIScope.overviewHeadline    = <h2>\u00D6versikt \u00F6ver alla variabler med UI scope i den aktuella sessionen.</h2>
UsingSessionAndUIScope.sessionScopedValue  = V\u00E4rde med session-scope:
UsingSessionAndUIScope.shortDescription    = Det h\u00E4r exemplet visar de tv\u00E5 olika scope f\u00F6r variabler i en Vaadin 7 session. De \u00E4r det vanliga session scopet och det nya UI scopet. UI scopet omfattar alla data som beh\u00F6vs f\u00F6r inneh\u00E5llet av en webbl\u00E4sarens f\u00F6nster eller tab som \u00F6ppnades fr\u00E5n densamma session. P\u00E5 det h\u00E4r exemplet du kan redigera en variabel med session scope och en med UI scope. Sedan visas att f\u00F6r varje f\u00F6nster som \u00F6ppnades fr\u00E5n densamma session ett nytt UI objekt skapas som inneh\u00E5ller sin egen version av variablen med UI scope.
UsingSessionAndUIScope.uiScopedValue       = V\u00E4rde med UI-scope:

aboutText = <p>Vaadin By Example demo applikationen utvecklas och underh\u00E5lls av mig, Roland Kr\u00FCger. Applikationen ska vara en webbplats d\u00E4r det finns funktionsdugliga exempel som medf\u00F6ljer mina blogg inl\u00E4gg om Vaadin och till\u00E4gg f\u00F6r Vaadin jag utvecklar. Man kan f\u00F6rv\u00E4nta sig att denna applikationen ska ut\u00F6kas i framtiden med nya exempel n\u00E4r jag kommer att publicera nya blogg inl\u00E4gg eller Vaadin till\u00E4gg.</p>\r\n\r\n<h2>Om mig</h2>\r\n<p>Jag arbetar som en IT-utvecklare, utbildare och konsult f\u00F6r det tyska f\u00F6retaget <a href="http://www.oio.de" target="_blank">Orientation in Objects GmbH</a>\r\ni Mannheim i sydv\u00E4stra Tyskland. Jag bloggar regelbundet om Vaadin och Java-relaterade \u00E4mnen i <a href="http://blog.oio.de/author/rolandkrueger/" target="_blank">v\u00E5r f\u00F6retagets webblogg</a>. F\u00F6r att erbjuda enkla exempel f\u00F6r blogg inl\u00E4ggen jag skriver om Vaadin, jag skapade det GitHub repository <a href="https://github.com/rolandkrueger/vaadin-by-example" target="_blank">vaadin-by-example</a>. Den h\u00E4r demo applikationen integrerar de flesta av dessa exempel i en applikation.</p>\r\n\r\n<h3>Min svenska</h3>\r\n<p>Svenska \u00E4r inte mitt modersm\u00E5l, s\u00E5 jag m\u00E5ste be om orsak att de svenska \u00F6vers\u00E4ttningarna p\u00E5 denna sajt \u00E4r inte alltid r\u00E4tta eller s\u00E4rskilt bra. Men jag ville ju ha mer \u00E4n bara tv\u00E5 spr\u00E5k f\u00F6r att demonstrera internationaliseringen av en Vaadin applikation ;-) Du kan g\u00E4rna hj\u00E4lpa mig med att f\u00F6rb\u00E4ttra min svenska genom att p\u00E5peka mina fel till mig. Tack ska du ha!</p>\r\n\r\n<p>Du kan hitta mig p\u00E5 <a href="https://twitter.com/Roland_Krueger" target="_blank">Twitter</a>, <a href="https://plus.google.com/107390769372631613806" target="_blank">Google+</a> och <a href="https://github.com/rolandkrueger" target="_blank">Github</a>.</p>

componentHighlighter.description      = <p>Det finns tyv\u00E4rr ingen svensk \u00F6vers\u00E4ttning f\u00F6r denna sajt.</p>\r\n\r\n<ul>\r\n    <li><a href="?debug#!/demo/ComponentHighlighterDemo">Switch highlighting labels on</a></li>\r\n    <li><a href="?debug=quiet#!/demo/ComponentHighlighterDemo">Switch labels on, but hide the debug console</a></li>\r\n    <li><a href="?#!/demo/ComponentHighlighterDemo">Switch the labels off</a></li>\r\n</ul>\r\n\r\n<p>The Component Highlighter add-on is aimed at supporting the Vaadin developer while writing a Vaadin application. The add-on provides a component extension which will highlight the extended component in the browser with an eye-catching label containing the fully qualified class name of the extended component or a user-defined text. By that, you can see which part of your UI is implemented by which Java class directly in the browser. The extension is only active when the Vaadin application is running in debug mode. In production mode, the add-on will have no effect. A typical usage pattern for this add-on is shown by the following code:</p>\r\n\r\n<pre class="sourcecode">\r\npublic class MyComponent extends CustomComponent {\r\n    ...\r\n    public MyComponent() {\r\n        super();\r\n        new ComponentHighlighterExtension(this);\r\n        ...\r\n    }\r\n}</pre>\r\n\r\n<p>Here, a new local instance of the highlighter extension is created in the constructor of a CustomComponent. The CustomComponent is extended by the constructor of the ComponentHighlighterExtension if and only if the application is running in debug mode. Therefore, you don't need to check for the production mode yourself when creating new local instances of the extension. In production mode, local extension instances will simply fall through and will be removed by the garbage collector so no memory is wasted.</p>\r\n\r\n<p>The highlighting label is not visible in a running application in normal mode. These labels can be activated by switching on Vaadin's <span class="code">debug</span> mode using the <span class="code">debug</span> URL parameter. This parameter will usually open the Vaadin debug console. If you have extended any component in your application with the ComponentHighlighter add-on, the component will now be highlighted in the browser.</p>\r\n\r\n<p>This demo application makes intensive use of the add-on. Using the following links, you can switch the highlighting labels on and off. This will work because the demo application is running in debug mode. The labels then decorate the DIV of the extended component and indicate the component implementation's class name.</p>\r\n\r\n<h2>Usage</h2>\r\n<p>In order to use this add-on in your own project, you have to add the add-on's module descriptor to your own widget set descriptor:</p>\r\n\r\n<pre>\r\n&lt;module&gt;\r\n    &lt;inherits name="com.vaadin.DefaultWidgetSet" /&gt;\r\n    &lt;inherits name="org.vaadin.highlighter.ComponentHighlighterWidgetset" /&gt;\r\n&lt;/module&gt;\r\n</pre>\r\n\r\n<p>The <a href="https://vaadin.com/book" target="_blank">Book of Vaadin</a> extensively describes all necessary steps to include Vaadin addons into your project and how to compile your own widget set.</p>
componentHighlighter.headline         = Component Highlighter Addon
componentHighlighter.shortDescription = Vaadin addon for highlighting and describing a Vaadin component in debug mode.

demoselection.description = <p>F\u00F6ljande demos st\u00E5r till f\u00F6rfogande:</p>

home.description = <p>V\u00E4lkommen till demo applikationen f\u00F6r det <a href="https://github.com/rolandkrueger/vaadin-by-example" target="_blank">vaadin-by-example GitHub repository</a>. Det h\u00E4r demo applikationen erbjuder funktionsdugliga exempel f\u00F6r de flesta exempel projekt i det repository. Dessutom fungerar applikationen som en demo applikation f\u00F6r Vaadin till\u00E4ggen som utvecklas av <a href="#!/about">mig</a>. Du kan <a href="#!/demos">pr\u00F6va</a> varje demo och f\u00E5 ytterligare information om dessa p\u00E5 deras demo sajt.</p>\r\n\r\n<h2>Om demo applikationen</h2>\r\n<p>K\u00E4llkoden av sj\u00E4lva demo applikationen kan nedladdas fr\u00E5n <a href="https://github.com/rolandkrueger/vaadin-by-example/tree/master/all-in-one-demo" target="_blank">det vaadin-by-example GitHub repository</a>. Du kan nedladda koden och k\u00F6ra demo applikationen lokalt med <a href="http://maven.apache.org/" target="_blank">utvecklingsverktyget Maven</a>. Allt du m\u00E5ste g\u00F6ra \u00E4r att k\u00F6ra f\u00F6ljande kommando i programmets katalogen. Det beh\u00F6vs att du har <span class="code">mvn</span> kommandot i din <span class="code">PATH</span> variabel:</p>\r\n\r\n<p class="sourcecode">$ mvn package jetty:run</p>\r\n\r\n<p>Demo applikationen anv\u00E4nder det <a href="http://www.springsource.org/" target="_blank">Spring framework</a> och <a href="http://projectlombok.org" target="_blank">Projekt Lombok</a>. Dessutom anv\u00E4nds mitt eget programbibliotek <a href="https://github.com/rolandkrueger/AppBaseForVaadin" target="_blank">AppBaseForVaadin</a> som erbjuder allm\u00E4nna tj\u00E4nster som t.ex. en event bus, templating f\u00F6r i18n (med Apache Velocity) eller navigation.</p>\r\n\r\n<h2>Licensiering</h2>\r\n<p>K\u00E4llkoden f\u00F6r denna demo applikation licensieras under MIT licensen.</p>

i18nForCustomLayoutsUsingVelocity.description      = <p>Denna demo applikation anv\u00E4nder Apache Velocity f\u00F6r att tolka alla CustomLayout schabloner som finns p\u00E5 denna anv\u00E4ndargr\u00E4nssnitt. Beskrivningstexten du l\u00E4ser just nu tolkas med en vanlig Java ResourceBundle. Alla andra texter av denna applikation tolkas ocks\u00E5 p\u00E5 samma s\u00E4tt. Du kan v\u00E4lja spr\u00E5ket som anv\u00E4nds f\u00F6r lokaliseringen med ComboBox-komponenten uppe i f\u00F6nstret.</p>\r\n\r\n<p>Template datafilerna som anv\u00E4nds f\u00F6r att instansiera ett CustomLayout inneh\u00E5ller referenser till nycklarna som definieras i ResourceBundle-filerna. Du kan ta en titt t. ex. p\u00E5 CustomLayout schablonen av huvudsidan <a href="VAADIN/themes/demo/layouts/main.html" target="_blank">h\u00E4r</a> (\u00F6ppna webbsidans k\u00E4llkod f\u00F6r att se p\u00E5 dokumentets uppbyggnad).</p>\r\n\r\n<p>Notera att denna demo applikation anv\u00E4nder en lite annan ansats \u00E4n beskriven i blogg till\u00E4gget som tillh\u00F6r exemplet. Eftersom applikationen anv\u00E4nder Spring frameworket, Velocity-motorn skapas och injiceras av Spring. Dessutom utnyttjar denna ansats inte Velocitys Resource Tool men ist\u00E4llet anv\u00E4nder Springs MessageSource klassen f\u00F6r att f\u00E5 \u00E5tkomst till \u00F6vers\u00E4ttningarna under tolkningen. Du kan titta p\u00E5 denna ansats i klassen <a href="https://github.com/rolandkrueger/AppBaseForVaadin/blob/master/src/main/java/org/vaadin/appbase/service/templating/impl/TemplatingService.java">TemplatingService</a>.</p>
i18nForCustomLayoutsUsingVelocity.headline         = Lokalisering f\u00F6r CustomLayouts med Apache Velocity
i18nForCustomLayoutsUsingVelocity.shortDescription = Detta exempel demonstrerar hur Vaadin CustomLayout schabloner kan lokaliseras med Apache Velocity. D\u00E4rigenom \u00E4r det m\u00F6jligt att tolka statiska texter som anv\u00E4nds i CustomLayouts p\u00E5 ett anv\u00E4ndares spr\u00E5k.
