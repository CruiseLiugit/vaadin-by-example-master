
FieldGroupSelectNestedJavaBeans.beanItemContainerInfo  = This selection component uses a <strong>com.vaadin.data.util.BeanItemContainer</strong> as its container data source:
FieldGroupSelectNestedJavaBeans.beanItemContainerTab   = Department selector's container data source: BeanItemContainer
FieldGroupSelectNestedJavaBeans.department             = Department
FieldGroupSelectNestedJavaBeans.description            = This demo shows how to configure a FieldGroup that contains a selection component for selecting a nested JavaBean property of another JavaBean entity. In this example, there is an entity bean 'Employee' which contains a nested JavaBean property 'Department'. In the two forms shown on the tab-sheet you can add new Employee objects to the employee table. The first form uses a BeanItemContainer as the container data source of the department selection component. The second form uses an IndexedContainer as data model. For this second FieldGroup to work, it is necessary to set a specific converter on the selection component which converts between item ID and Department object. Of course, for the user both forms behave exactly the same which is the whole purpose of this tutorial. The difference between these two forms is only visible in code.
FieldGroupSelectNestedJavaBeans.firstname              = First Name
FieldGroupSelectNestedJavaBeans.headline               = Select Nested JavaBeans With a Vaadin FieldGroup
FieldGroupSelectNestedJavaBeans.indexedContainerInfo   = This selection component uses a <strong>com.vaadin.data.util.IndexedContainer</strong> as its container data source:
FieldGroupSelectNestedJavaBeans.indexedContainerTab    = Department selector's container data source: IndexedContainer
FieldGroupSelectNestedJavaBeans.lastname               = Last Name
FieldGroupSelectNestedJavaBeans.shortDescription       = This demo shows how to select a nested JavaBean from an entity bean through a selection component in a FieldGroup. Two different Container implementations are used as container data source for the selection component.
FieldGroupSelectNestedJavaBeans.validationerrormessage = Unable to commit input. Did you fill out all required fields?
FieldGroupSelectNestedJavaBeans.validationfailed       = Validation failed

UsingSessionAndUIScope.activeUIobjects     = There are currently {0} UI objects active for this session (Session ID <em>{1}</em>).
UsingSessionAndUIScope.currentUIsID        = Current UI's ID: 
UsingSessionAndUIScope.editVariables       = Edit session/UI scoped variables:
UsingSessionAndUIScope.headline            = Using Vaadin's Session and UI Scope
UsingSessionAndUIScope.openThisApplication = Open this example in a new browser window/tab <a href="#!{0}" target="_blank">with this link</a> and refresh the browser contents after having edited the scoped variables.
UsingSessionAndUIScope.overviewHeadline    = <h2>Overview of all UI scoped variables in the current session</h2>
UsingSessionAndUIScope.sessionScopedValue  = Session-scoped value:
UsingSessionAndUIScope.shortDescription    = This demo demonstrates the two different scopes of a Vaadin 7 session. These are the common session scope and the new UI scope. The UI scope represents the data needed for the contents of one browser window or tab opened from the same session. This example lets you edit one session-scoped and one UI-scoped variable. It then demonstrates that for each browser window opened from the same session, a new UI object is created that contains its own version of the UI-scoped variable.
UsingSessionAndUIScope.uiScopedValue       = UI-scoped value:

aboutText = <p>The Vaadin-By-Example demo application is written and maintained by me, Roland Kr\u00FCger. This application is meant to serve as a playground to provide working examples accompanying my blog posts about Vaadin and the Vaadin addons developed by me. It can be expected that this application will be extended in the future with new demos as I publish the next blog posts or Vaadin addons.</p>\r\n\r\n<h2>About Me</h2>\r\n<p>I work as a software developer, trainer, and consultant for the Germany-based company <a href="http://www.oio.de" target="_blank">Orientation in Objects GmbH</a>, located in Mannheim in southwest Germany. I regularly write about Vaadin and Java-related topics in <a href="http://blog.oio.de/author/rolandkrueger/" target="_blank">our company's blog</a>. In order to provide simple examples for the blog posts I write about Vaadin, I created the GitHub repository <a href="https://github.com/rolandkrueger/vaadin-by-example" target="_blank">vaadin-by-example</a>. This demo integrates most of these examples into one application.</p>\r\n\r\n<p>You can find me on <a href="https://twitter.com/Roland_Krueger" target="_blank">Twitter</a>, <a href="https://plus.google.com/107390769372631613806" target="_blank">Google+</a>, and <a href="https://github.com/rolandkrueger" target="_blank">Github</a>.</p>\r\n\r\n<h2>Credits</h2>\r\n<p>Credits for the icons used by this application go to <a href="http://www.famfamfam.com">Mark James</a> and <a href="http://glyphicons.com/">Glyphicons</a>. Credits for the background images go to <a href="http://www.backgroundlabs.com" title="Background Labs">Background Labs</a>.</p>

componentHighlighter.description      = <ul>\r\n    <li><a href="?debug#!/demo/ComponentHighlighterDemo">Switch highlighting labels on</a></li>\r\n    <li><a href="?debug=quiet#!/demo/ComponentHighlighterDemo">Switch labels on, but hide the debug console</a></li>\r\n    <li><a href="?#!/demo/ComponentHighlighterDemo">Switch the labels off</a></li>\r\n</ul>\r\n\r\n<p>The Component Highlighter add-on is aimed at supporting the Vaadin developer while writing a Vaadin application. The add-on provides a component extension which will highlight the extended component in the browser with an eye-catching label containing the fully qualified class name of the extended component or a user-defined text. By that, you can see which part of your UI is implemented by which Java class directly in the browser. The extension is only active when the Vaadin application is running in debug mode. In production mode, the add-on will have no effect. A typical usage pattern for this add-on is shown by the following code:</p>\r\n\r\n<pre class="sourcecode">\r\npublic class MyComponent extends CustomComponent {\r\n    ...\r\n    public MyComponent() {\r\n        super();\r\n        new ComponentHighlighterExtension(this);\r\n        ...\r\n    }\r\n}</pre>\r\n\r\n<p>Here, a new local instance of the highlighter extension is created in the constructor of a CustomComponent. The CustomComponent is extended by the constructor of the ComponentHighlighterExtension if and only if the application is running in debug mode. Therefore, you don't need to check for the production mode yourself when creating new local instances of the extension. In production mode, local extension instances will simply fall through and will be removed by the garbage collector so no memory is wasted.</p>\r\n\r\n<p>The highlighting label is not visible in a running application in normal mode. These labels can be activated by switching on Vaadin's <span class="code">debug</span> mode using the <span class="code">debug</span> URL parameter. This parameter will usually open the Vaadin debug console. If you have extended any component in your application with the ComponentHighlighter add-on, the component will now be highlighted in the browser.</p>\r\n\r\n<p>This demo application makes intensive use of the add-on. Using the following links, you can switch the highlighting labels on and off. This will work because the demo application is running in debug mode. The labels then decorate the DIV of the extended component and indicate the component implementation's class name.</p>\r\n\r\n<h2>Usage</h2>\r\n<p>In order to use this add-on in your own project, you have to add the add-on's module descriptor to your own widget set descriptor:</p>\r\n\r\n<pre>\r\n&lt;module&gt;\r\n    &lt;inherits name="com.vaadin.DefaultWidgetSet" /&gt;\r\n    &lt;inherits name="org.vaadin.highlighter.ComponentHighlighterWidgetset" /&gt;\r\n&lt;/module&gt;\r\n</pre>\r\n\r\n<p>The <a href="https://vaadin.com/book" target="_blank">Book of Vaadin</a> extensively describes all necessary steps to include Vaadin addons into your project and how to compile your own widget set.</p>
componentHighlighter.headline         = Component Highlighter Addon
componentHighlighter.shortDescription = Vaadin addon for highlighting and describing a Vaadin component in debug mode.

demoselection.description = <p>The following demos are currently available:</p>

home.description = <p>Welcome to the demo application for the <a href="https://github.com/rolandkrueger/vaadin-by-example" target="_blank">vaadin-by-example GitHub repository</a>. This demo provides working examples for most of the example projects in the repository. Furthermore it serves as demo application for the Vaadin addons provided by <a href="#!/about">me</a>. You can <a href="#!/demos">browse</a> each individual demo and get additional information about these on the respective demo page.\r\n</p>\r\n\r\n<h2>About The Demo Application</h2>\r\n<p>The source code of this demo application itself can be found in the <a href="https://github.com/rolandkrueger/vaadin-by-example/tree/master/all-in-one-demo" target="_blank">vaadin-by-example GitHub repository</a>. You can check it out and run the demo locally using the <a href="http://maven.apache.org/" target="_blank">Maven build tool</a>. All you need to do for that is to run the following command inside of the cloned project directory provided you have added the <span class="code">mvn</span> command to your <span class="code">PATH</span> variable:</p>\r\n\r\n<p class="sourcecode">$ mvn package jetty:run</p>\r\n\r\n<p>The demo application makes use of the <a href="http://www.springsource.org/" target="_blank">Spring framework</a> and <a href="http://projectlombok.org" target="_blank">Project Lombok</a>. In addition it uses my library <a href="https://github.com/rolandkrueger/AppBaseForVaadin" target="_blank">AppBaseForVaadin</a> which provides a basic framework for commonly used services in a web application, such as an event bus, templating for i18n (using Apache Velocity), or navigation.</p>\r\n\r\n<h2>Licensing</h2>\r\n<p>The source code for this demo application is licensed under the terms of the MIT license.</p>

i18nForCustomLayoutsUsingVelocity.description      = <p>This demo uses Apache Velocity templating for translating all of its CustomLayout templates. The demo description text you're reading right now is translated and maintained in a common Java resource bundle, as is the case with all the other translated texts of this application. You can change the language for this demo using the language selector combobox in the upper right corner.</p>\r\n\r\n<p>The template files used for instantiating the CustomLayouts contain references to the translation keys defined in the resource bundles. You can take a look, for example, at the CustomLayout template of the main page <a href="VAADIN/themes/demo/layouts/main.html" target="_blank">here</a> (open the source view for this page to see the document structure).</p>\r\n\r\n<p>Note that this demo uses a slightly different approach for templating than described in the accompanying blog post. Since this application uses the Spring framework, the Velocity engine is created and injected by Spring. Furthermore, this approach does not make use of Velocity's Resource Tool but instead uses Spring's MessageSource class to access the individual translations during the templating process. You can find the source code for this approach in service class <a href="https://github.com/rolandkrueger/AppBaseForVaadin/blob/master/src/main/java/org/vaadin/appbase/service/templating/impl/TemplatingService.java">TemplatingService</a>.</p>
i18nForCustomLayoutsUsingVelocity.headline         = i18n For CustomLayouts Using Apache Velocity
i18nForCustomLayoutsUsingVelocity.shortDescription = This example demonstrates how Vaadin CustomLayout templates can be localized with the Apache Velocity templating engine. By that, it is possible to translate static text used in CustomLayouts into a user's locale.
